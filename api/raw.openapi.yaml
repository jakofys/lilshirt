openapi: 3.0.0
info:
  title: Fluid
  description: Fluid
  version: 1.0.0
paths:
  /{hostname}/{slug}:
    get:
      operationId: LinkRedirect
      summary: Redirect
      description: Redirect a to targeted link
      tags:
        - Link
      parameters:
        - $ref: '#/components/parameters/Hostname'
        - $ref: '#/components/parameters/Slug'
      responses:
        '301':
          $ref: '#/components/responses/LinkRedirectedResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequestResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ErrorForbiddenResponse'
        '409':
          $ref: '#/components/responses/ErrorConflictResponse'
        '500':
          $ref: '#/components/responses/ErrorInternalServerResponse'
  /links:
    post:
      operationId: LinkCreate
      summary: Create a redirection link
      description: Create a redirection link
      tags:
        - Link
      requestBody:
        $ref: '#/components/requestBodies/LinkCreationRequest'
      responses:
        '201':
          $ref: '#/components/responses/LinkCreatedResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequestResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ErrorForbiddenResponse'
        '409':
          $ref: '#/components/responses/ErrorConflictResponse'
        '500':
          $ref: '#/components/responses/ErrorInternalServerResponse'
    get:
      operationId: LinkList
      summary: List a redirection link
      description: List a redirection link
      tags:
        - Link
      responses:
        '200':
          $ref: '#/components/responses/LinkListResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequestResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ErrorForbiddenResponse'
        '409':
          $ref: '#/components/responses/ErrorConflictResponse'
        '500':
          $ref: '#/components/responses/ErrorInternalServerResponse'
  /links/{linkId}:
    get:
      operationId: LinkGet
      summary: Get a redirection link
      description: Get a redirection link
      tags:
        - Link
      parameters:
        - $ref: '#/components/parameters/LinkId'
      responses:
        '200':
          $ref: '#/components/responses/LinkGetResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequestResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ErrorForbiddenResponse'
        '404':
          $ref: '#/components/responses/ErrorNotFoundResponse'
        '500':
          $ref: '#/components/responses/ErrorInternalServerResponse'
    delete:
      operationId: LinkDelete
      summary: Delete a redirection link
      description: Delete a redirection link
      tags:
        - Link
      parameters:
        - $ref: '#/components/parameters/LinkId'
      responses:
        '200':
          $ref: '#/components/responses/LinkDeletedResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequestResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ErrorForbiddenResponse'
        '404':
          $ref: '#/components/responses/ErrorNotFoundResponse'
        '409':
          $ref: '#/components/responses/ErrorConflictResponse'
        '500':
          $ref: '#/components/responses/ErrorInternalServerResponse'
components:
  parameters:
    Hostname:
      name: hostname
      in: path
      description: corresponding hostname
      required: true
      allowEmptyValue: false
      schema:
        type: string
        format: hostname
    Slug:
      name: slug
      in: path
      description: autogenerated string composed of 6 to 8 path
      required: true
      allowEmptyValue: false
      schema:
        type: string
    LinkId:
      name: linkId
      in: path
      description: identifier of the link
      required: true
      allowEmptyValue: false
      schema:
        type: string
        format: uuid
        x-go-type: uuid.UUID
        x-go-type-import:
          path: github.com/google/uuid
  headers:
    Location:
      description: targeted redirection link
      schema:
        type: string
  responses:
    LinkRedirectedResponse:
      description: Redirect from short to long url
      headers:
        Location:
          $ref: '#/components/headers/Location'
    ErrorBadRequestResponse:
      description: Error encounter when client payload isn't valid
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    ErrorUnauthorizedResponse:
      description: Error encounter when the user have no permission to access it
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    ErrorForbiddenResponse:
      description: Error encounter when the server refuse access to it
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    ErrorConflictResponse:
      description: Error encounter when request user made can't be performed on resource that is read only
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    ErrorInternalServerResponse:
      description: Error encounter when occured an server lack, so retry it later
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    LinkListResponse:
      description: Retrieve link information
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Link'
    LinkCreatedResponse:
      description: When correctly create and bind long to short redirection url
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Link'
    LinkGetResponse:
      description: Retrieve link information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Link'
    ErrorNotFoundResponse:
      description: Error encounter when resource does not exists
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    LinkDeletedResponse:
      description: link was correctly deleted
  schemas:
    Error:
      title: Error
      description: client error indicates some details about error
      type: object
      properties:
        title:
          type: string
          description: the identifiable name
        instance:
          type: string
          format: uri
          description: indicate the resource on which the operation is applied
        type:
          type: string
          description: point uri of the title error
          format: url
        detail:
          type: string
          description: some detail about what error means
    Link:
      title: Link
      description: Representation of short link, and it corresponding long url that will redirected by
      type: object
      required:
        - id
        - long
        - short
        - createdAt
        - expiredAt
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
          description: idenfitier of the registered redirection link
          nullable: false
        long:
          type: string
          format: url
          x-go-type: url.URL
          description: target url of the redirection
          nullable: false
        short:
          type: string
          format: url
          x-go-type: url.URL
          description: the short url generated by the service from when the client will be redirected
          nullable: false
        createdAt:
          type: string
          format: date
          x-go-type: time.Time
          description: when the link has been created by the client
          nullable: false
        expiredAt:
          type: string
          format: date
          x-go-type: time.Time
          description: when the link will be expired, so unusable
          nullable: false
    LinkCreation:
      title: LinkCreation
      description: payload to create a link redirection from long one
      type: object
      required:
        - long
      properties:
        long:
          type: string
          format: url
          description: target url of the redirection
  requestBodies:
    LinkCreationRequest:
      description: needed content to request link creation
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LinkCreation'
